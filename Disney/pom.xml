'''<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.disney.ics.id</groupId>
    <artifactId>AdminControllerCloudFunctionalTests</artifactId>
    <version>1.7.203</version>
    <name>Cloud Functional Tests for AdminController</name>
    <packaging>jar</packaging>

    <parent>
        <groupId>com.disney.qa</groupId>
        <artifactId>mara-jade-parent-pom-jacoco</artifactId>
        <version>0.0.17</version>
    </parent>

    <properties>
        <!-- NOTE: This pom inherits from the MJ pom. It does NOT inherit from the AC root pom. Do not expect properties from the AC root pom to be available here. -->

        <ant.plugin.reports>../target/reports</ant.plugin.reports>
        <combined.cloud.functional.report.directory>${ant.plugin.reports}/cloud-functional-coverage-report</combined.cloud.functional.report.directory>
        <combined.total.report.directory>${ant.plugin.reports}/total-coverage-report</combined.total.report.directory>
        <combined-test-coverage-threshold>0.80</combined-test-coverage-threshold>
        <cert.dir>${project.basedir}/../cert</cert.dir>
        <docker.image.name.ac>${docker.registry}/oneid/admin-controller:${project.version}</docker.image.name.ac>
        <docker.image.name.legacy.ac>${docker.registry}/oneid/legacy-admin-controller:${project.version}</docker.image.name.legacy.ac>
        <external.config.dir>${project.basedir}/../admincontroller-config</external.config.dir>

        <!-- Comma delimited lists to control which groups are run in PR builds (empty included groups will run all tests) -->
        <failsafe.excluded.groups>WAF,PUBLIC_HOST,BAN_SERVICE_DISABLED</failsafe.excluded.groups>
        <failsafe.included.groups />

        <failsafe.thread.count>8</failsafe.thread.count>
        <jacoco.ac.exec.file>jacoco-ac-cloud-functional.exec</jacoco.ac.exec.file>
        <jacoco.base>../target/jacoco</jacoco.base>
        <jacoco.internal.port>8522</jacoco.internal.port>
        <jacoco.legacyac.exec.file>jacoco-legacy-ac-cloud-functional.exec</jacoco.legacyac.exec.file>
        <local.docker.conf.url>file:///data/apps/service/confOverride/${local.docker.conf.file}</local.docker.conf.url>
        <logs.filepath>/data/apps/service/logs</logs.filepath>
        <functional.test.memory.args>-XX:MaxMetaspaceSize=1500M -XX:MaxDirectMemorySize=1500M -Xmx1500M</functional.test.memory.args>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <test.args>${jacoco.runtime.args} -Dtestenv=${test.env} -Dservices.admincontroller.environments.${test.env}.host=https://localhost:${dockerServiceExternalPort}/admincontroller-service -Dservices.admincontrollerlegacy.environments.${test.env}.host=https://localhost:${dockerLegacyExternalPort}/admincontroller</test.args>
        
        <!-- Plugin and Dependency Versions -->
        <ban.resources.version>1.0.150</ban.resources.version>
        <docker-maven-plugin.version>0.27.2</docker-maven-plugin.version>
        <jacoco.version>0.7.8</jacoco.version>
        <maven.ant.plugin.version>1.8</maven.ant.plugin.version>
        <maven.antrun.plugin.version>1.8</maven.antrun.plugin.version>
        <maven.failsafe.plugin.version>2.19</maven.failsafe.plugin.version>
        <profile.resources.version>2.31.426</profile.resources.version>
    </properties>


    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.disney.qa</groupId>
                <artifactId>mara-jade-test-library</artifactId>
                <version>0.1.46</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>com.disney.qa</groupId>
            <artifactId>admincontroller-test-resources</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.disney.bst</groupId>
            <artifactId>ban-service-functional-test-resources</artifactId>
            <version>${ban.resources.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>com.disney.qa</groupId>
                    <artifactId>mara-jade-test-library</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.disney.qa</groupId>
                    <artifactId>mara-jade-test-library-aws</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.disney.qa</groupId>
            <artifactId>profile-test-resources</artifactId>
            <version>${profile.resources.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>com.disney.qa</groupId>
                    <artifactId>mara-jade-test-library</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.disney.qa</groupId>
                    <artifactId>mara-jade-test-library-aws</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <build>
        <sourceDirectory>src/main/java</sourceDirectory>
    </build>

    <profiles>
        <profile>
            <id>QA_LOCAL</id>
            <activation>
                <property>
                    <name>BuildPipelinePR</name>
                </property>
            </activation>
            <properties>
                <local.docker.conf.file>ac.us-west-2_qa.properties</local.docker.conf.file>
                <test.env>qa_cloud_west</test.env>
            </properties>
        </profile>

        <profile>
            <id>STG_LOCAL</id>
            <properties>
                <local.docker.conf.file>ac.us-west-2_stg.properties</local.docker.conf.file>
                <test.env>stg_cloud_west</test.env>
            </properties>
        </profile>

        <profile>
            <id>run-functional</id>
            <activation>
                <property>
                    <name>BuildPipelinePR</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <!-- doing file and directory setup for the containers -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>${maven.antrun.plugin.version}</version>
                        <executions>
                            <execution>
                                <phase>generate-test-sources</phase>
                                <configuration>
                                    <tasks>
                                        <echo message="Creating folder for logs" />
                                        <mkdir dir="${project.build.directory}/logs" />
                                        <chmod dir="${project.build.directory}/logs" perm="777" />

                                        <!--grant access to config directories and config files-->
                                        <chmod dir="${external.config.dir}" perm="777" />
                                        <chmod dir="${external.config.dir}" perm="777" includes="*.properties" />

                                        <!--grant access to certs directory and certs itself-->
                                        <chmod dir="${cert.dir}" perm="777" />
                                        <chmod dir="${cert.dir}" perm="777" includes="*.*" />
                                    </tasks>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- starting containers for service(s) -->
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>${docker-maven-plugin.version}</version>
                        <configuration>
                            <showLogs>true</showLogs>
                            <verbose>true</verbose>
                            <containerNamePattern>%n-%t-%i</containerNamePattern>
                            <images>
                                <image>
                                    <!-- Artifact Image name, assembled during build -->
                                    <name>${docker.image.name.ac}</name>
                                    <alias>ac</alias>
                                    <run>
                                        <env>
                                            <AWS_ACCESS_KEY_ID>${env.AWS_ACCESS_KEY_ID}</AWS_ACCESS_KEY_ID>
                                            <AWS_REGION>${service.aws.region}</AWS_REGION>
                                            <AWS_ROLE>${service.aws.role}</AWS_ROLE>
                                            <AWS_SECRET_ACCESS_KEY>${env.AWS_SECRET_ACCESS_KEY}</AWS_SECRET_ACCESS_KEY>
                                            <CLOUD>TRUE</CLOUD>
                                            <CONFIG_SECRETS>ssm://oneid/admincontroller/qa</CONFIG_SECRETS>
                                            <CONFIG_OVERRIDE>${local.docker.conf.url}</CONFIG_OVERRIDE>
                                            <JAVA_OPTS>-javaagent:/data/apps/service/jacoco/org.jacoco.agent-runtime.jar=output=tcpserver,address=*,port=${jacoco.internal.port},includes=com.disney.*</JAVA_OPTS>
                                            <LOG4J_CONFIGURATION_FILE>classpath:log4j2_AC_onpremise.xml</LOG4J_CONFIGURATION_FILE> <!-- on premises (file-based) logging is easier to use for testing/dev -->
                                            <NR_APP_ID>docker-ondemand-test-run</NR_APP_ID>
                                        </env>
                                        <ports>
                                            <port>dockerServiceExternalPort:8443</port>
                                            <port>randomJacocoPort:${jacoco.internal.port}</port>
                                        </ports>
                                        <volumes>
                                            <bind>
                                                <!--/host_path:/container_path-->
                                                <volume>${project.build.directory}/logs:${logs.filepath}</volume>
                                                <!-- Expose a mount for the cert file -->
                                                <volume>${cert.dir}:/data/apps/ssl/certs</volume>
                                                <volume>${external.config.dir}:/data/apps/service/confOverride</volume>
                                            </bind>
                                        </volumes>
                                        <wait>
                                            <http>
                                                <method>GET</method>
                                                <allowAllHosts>true</allowAllHosts>
                                                <url>https://localhost:${dockerServiceExternalPort}/admincontroller-service/service-status</url>
                                                <status>200</status>
                                            </http>
                                            <time>240000</time>
                                            <shutdown>500</shutdown>
                                        </wait>
                                    </run>
                                </image>
                                <image>
                                    <!-- Artifact Image name, assembled during build -->
                                    <name>${docker.image.name.legacy.ac}</name>
                                    <alias>legacy</alias>
                                    <run>
                                        <env>
                                            <AWS_ACCESS_KEY_ID>${env.AWS_ACCESS_KEY_ID}</AWS_ACCESS_KEY_ID>
                                            <AWS_REGION>${service.aws.region}</AWS_REGION>
                                            <AWS_ROLE>${service.aws.role}</AWS_ROLE>
                                            <AWS_SECRET_ACCESS_KEY>${env.AWS_SECRET_ACCESS_KEY}</AWS_SECRET_ACCESS_KEY>
                                            <CLOUD>TRUE</CLOUD>
                                            <CONFIG_SECRETS>ssm://oneid/admincontroller/qa</CONFIG_SECRETS>
                                            <CONFIG_OVERRIDE>${local.docker.conf.url}</CONFIG_OVERRIDE>
                                            <JAVA_OPTS>-javaagent:/data/apps/service/jacoco/org.jacoco.agent-runtime.jar=output=tcpserver,address=*,port=${jacoco.internal.port},includes=com.disney.*</JAVA_OPTS>
                                            <LOG4J_CONFIGURATION_FILE>classpath:log4j2_AC_onpremise.xml</LOG4J_CONFIGURATION_FILE> <!-- on premises (file-based) logging is easier to use for testing/dev -->
                                            <NR_APP_ID>docker-ondemand-test-run</NR_APP_ID>
                                        </env>
                                        <ports>
                                            <port>dockerLegacyExternalPort:8443</port>
                                            <port>randomJacocoLegacyPort:${jacoco.internal.port}</port>
                                        </ports>
                                        <volumes>
                                            <bind>
                                                <!--/host_path:/container_path-->
                                                <volume>${project.build.directory}/logs:${logs.filepath}</volume>
                                                <!-- Expose a mount for the cert file -->
                                                <volume>${cert.dir}:/data/apps/ssl/certs</volume>
                                                <volume>${external.config.dir}:/data/apps/service/confOverride</volume>
                                            </bind>
                                        </volumes>
                                        <wait>
                                            <http>
                                                <method>GET</method>
                                                <allowAllHosts>true</allowAllHosts>
                                                <url>https://localhost:${dockerLegacyExternalPort}/admincontroller/status</url>
                                                <status>200</status>
                                            </http>
                                            <time>240000</time>
                                            <shutdown>500</shutdown>
                                        </wait>
                                    </run>
                                </image>
                            </images>
                        </configuration>
                        <executions>
                            <execution>
                                <id>stop-old-docker-if-any-running</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>start-docker</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                            </execution>
                            <!--wait until verify to stop & remove to allow time for dumping computed coverage-->
                            <execution>
                                <id>stop-docker</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>remove-docker</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>remove</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- running the functional tests-->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <configuration>
                            <skipITs>false</skipITs>
                            <includes>
                                <include>**/*Test.java</include>
                            </includes>
                            <testSourceDirectory>${basedir}/src/main/java/</testSourceDirectory>
                            <testClassesDirectory>${project.build.directory}/classes/</testClassesDirectory>
                            <parallel>classes</parallel>
                            <threadCount>${failsafe.thread.count}</threadCount>
                            <systemPropertyVariables>
                                <!--only used for QA_LOCAL-->
                                    <hostPort>${dockerServiceExternalPort}</hostPort>
                                    <legacyHostPort>${dockerLegacyExternalPort}</legacyHostPort>
                            </systemPropertyVariables>

                            <argLine>${test.args} ${functional.test.memory.args} -Dfile.encoding=UTF-8</argLine>
                            <excludedGroups>${failsafe.excluded.groups}</excludedGroups>
                            <groups>${failsafe.included.groups}</groups>
                            <properties>
                                <property>
                                    <name>usedefaultlisteners</name>
                                    <value>false</value>
                                </property>

                                <!--Custom testNG listeners-->
                                <property>
                                    <name>listener</name>
                                    <value>
                                        org.uncommons.reportng.HTMLReporter
                                    </value>
                                </property>
                            </properties>
                        </configuration>
                        <executions>
                            <execution>
                                <id>integration-test</id>
                                <goals>
                                    <goal>integration-test</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>verify</id>
                                <goals>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- generating the functional test coverage reports -->
                    <plugin>
                        <groupId>org.jacoco</groupId>
                        <artifactId>jacoco-maven-plugin</artifactId>
                        <version>${jacoco.version}</version>
                        <configuration>
                            <address>localhost</address>
                            <reset>true</reset>
                            <append>true</append>
                        </configuration>
                        <executions>
                            <execution>
                                <id>ac-functional-test-report</id>
                                <configuration>
                                    <port>${randomJacocoPort}</port>
                                    <destFile>${jacoco.base}/${jacoco.ac.exec.file}</destFile>
                                </configuration>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>dump</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>ac-legacy-functional-test-report</id>
                                <configuration>
                                    <port>${randomJacocoLegacyPort}</port>
                                    <destFile>${jacoco.base}/${jacoco.legacyac.exec.file}</destFile>
                                </configuration>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>dump</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>jacoco-merged-report</id>
            <activation>
                <property>
                    <name>BuildPipelinePR</name>
                </property>
            </activation>
            <properties>
                <build.directory.common>../Common/target</build.directory.common>
                <build.directory.service>../Service/target</build.directory.service>
                <build.directory.legacyservice>../LegacyService/target</build.directory.legacyservice>

                <classes.directory.common>../Common/target/classes</classes.directory.common>
                <classes.directory.service>../Service/target/classes</classes.directory.service>
                <classes.directory.legacyservice>../LegacyService/target/classes</classes.directory.legacyservice>

                <sources.directory.common>../Common/src/main/java</sources.directory.common>
                <sources.directory.service>../Service/src/main/java</sources.directory.service>
                <sources.directory.legacyservice>../LegacyService/src/main/java</sources.directory.legacyservice>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>${maven.ant.plugin.version}</version>
                        <executions>
                            <execution>
                                <id>copy-index</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <copy file="../site/html-reports/index.html" todir="${ant.plugin.reports}" />
                                    </target>
                                </configuration>
                            </execution>
                            <execution>
                                <id>copy-reports</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <copy todir="${ant.plugin.reports}/cloud-functional-test-report">
                                            <fileset dir="../CloudFunctionalTests/target/failsafe-reports/" includes="**" />
                                        </copy>
                                    </target>
                                </configuration>
                            </execution>
                            <execution>
                                <id>combined-total-reports</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <!-- Execute an ant task within maven -->
                                        <echo message="Generating combined total coverage reports" />
                                        <taskdef name="report" classname="org.jacoco.ant.ReportTask">
                                            <classpath path="${jacoco.base}/org.jacoco.ant.jar" />
                                        </taskdef>
                                        <mkdir dir="${combined.total.report.directory}" />
                                        <report>
                                            <executiondata>
                                                <fileset dir="${jacoco.base}">
                                                    <include name="*.exec" />
                                                </fileset>
                                            </executiondata>
                                            <structure name="Combined Total Coverage">
                                                <group name="total-coverage">
                                                    <classfiles>
                                                        <fileset dir="${classes.directory.common}">
                                                            <!-- Exclude getter/setter only pojo classes -->
                                                            <exclude name="**/com/disney/admincontroller/model/onesearch/*" />
                                                        </fileset> /&gt;
                                                        <fileset dir="${classes.directory.service}" />
                                                        <fileset dir="${classes.directory.legacyservice}" />
                                                    </classfiles>
                                                    <sourcefiles encoding="UTF-8">
                                                        <fileset dir="${sources.directory.common}" />
                                                        <fileset dir="${sources.directory.service}" />
                                                        <fileset dir="${sources.directory.legacyservice}" />
                                                    </sourcefiles>
                                                </group>
                                            </structure>
                                            <html destdir="${combined.total.report.directory}/html" />
                                            <xml destfile="${combined.total.report.directory}/total-report.xml" />
                                            <csv destfile="${combined.total.report.directory}/total-report.csv" />
                                            <check>
                                                <!-- All classes must have 80% line and branch coverage .
                                                     Note we use 2 decimal places so that we get can any check failure messages reported to 2 decimal places  -->
                                                <rule>
                                                    <limit counter="INSTRUCTION" value="COVEREDRATIO" minimum="${combined-test-coverage-threshold}" />
                                                </rule>
                                            </check>
                                        </report>
                                    </target>
                                </configuration>
                            </execution>
                            <execution>
                                <id>ft-cloud-reports</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <!-- Functional Cloud test only coverage-->
                                        <echo message="Generating Functional Cloud coverage report" />
                                        <taskdef name="report" classname="org.jacoco.ant.ReportTask">
                                            <classpath path="${jacoco.base}/org.jacoco.ant.jar" />
                                        </taskdef>
                                        <mkdir dir="${combined.cloud.functional.report.directory}" />
                                        <report>
                                            <executiondata>
                                                <fileset dir="${jacoco.base}">
                                                    <include name="*cloud-functional.exec" />
                                                </fileset>
                                            </executiondata>
                                            <structure name="Functional Cloud Test Coverage">
                                                <group name="functional-cloud-coverage">
                                                    <classfiles>
                                                        <fileset dir="${classes.directory.service}" />
                                                        <fileset dir="${classes.directory.legacyservice}" />
                                                    </classfiles>
                                                    <sourcefiles encoding="UTF-8">
                                                        <fileset dir="${sources.directory.service}" />
                                                        <fileset dir="${sources.directory.legacyservice}" />
                                                    </sourcefiles>
                                                </group>
                                            </structure>
                                            <html destdir="${combined.cloud.functional.report.directory}/html" />
                                            <xml destfile="${combined.cloud.functional.report.directory}/functional-report.xml" />
                                            <csv destfile="${combined.cloud.functional.report.directory}/functional-report.csv" />
                                        </report>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>org.jacoco</groupId>
                                <artifactId>org.jacoco.ant</artifactId>
                                <version>${jacoco.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>bde-run</id>
            <activation>
                <property>
                    <name>!env.AWS_ACCESS_KEY_ID</name>
                </property>
            </activation>
            <properties>
                <service.aws.role>arn:aws:iam::152192157982:role/us-west-2-admincontroller-qa-role</service.aws.role>
                <service.aws.region /> <!-- use container region -->
            </properties>
        </profile>
        <profile>
            <id>local-run</id>
            <activation>
                <property>
                    <name>env.AWS_ACCESS_KEY_ID</name>
                </property>
            </activation>
            <properties>
                <service.aws.role>arn:aws:iam::152192157982:role/us-west-2-admincontroller-qa-role</service.aws.role>
                <service.aws.region>us-west-2</service.aws.region>
            </properties>
        </profile>
    </profiles>

  <scm>
    <tag>admincontroller-project-1.7.203</tag>
  </scm>
</project>'